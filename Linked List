import java.util.Stack;

public class linkedList {
    static class Node{
        int data;
        Node next;
        public Node(int data){
            this.data=data;
            next=null;
        }
    }
    Node head;
//Inserting Node in LinkedList
    public static linkedList insert(linkedList list,int d){
        Node new_node= new Node(d);
        if(list.head==null){
            list.head=new_node;
        }else{
            Node temp=list.head;
            while(temp.next!=null){
                temp=temp.next;

            }
            temp.next=new_node;

        }
        return list;
    }
    
    //printing Linked List
    public static void printList(linkedList list){
        Node temp= list.head;
        System.out.print("Linked List: ");
        while(temp!=null){

            System.out.print(temp.data+" ");
            temp=temp.next;
        }
    }
    //Deleting Duplicates
    public static linkedList dltDuplicate(linkedList list){
        Node temp= list.head;
        while(temp!=null){
            if(temp.next!=null && temp.data==temp.next.data){
                temp.next=temp.next.next;

            }else{
                temp=temp.next;
            }
        }
        return list;
    }
//Counting Nodes
    public static int countNodes(linkedList list){
        Node nd= list.head;
        int count=0;
        while(nd!=null){
            count++;
            nd=nd.next;
        }
        return count;
    }
//Sorting LinkedList
    public static linkedList sort(linkedList list){
      Node curr=list.head;
      Node index=null;
        while(curr!=null){
            index=curr.next;
            while(index!=null){
                if(curr.data>index.data){
                    int temp= curr.data;
                    curr.data=index.data;
                    index.data=temp;

                }
                index=index.next;
            }
            curr=curr.next;
        }
        return list;
    }
//Deleting alternative Nodes
    public static Node dlt_alt(Node head){
        if(head==null){
            return null;
        }
        Node temp=head;
        while (temp!=null && temp.next!=null){

                temp.next = temp.next.next;
            temp=temp.next;

        }
        return head;

    }
//to segregate odd and even nodes
    public static linkedList segregate(linkedList list, Node head){
        Node end=head;
        Node curr=head;
        Node prev=null;
        while(end.next!=null){
            end=end.next;
            Node nd= end;
            while (curr.data%2!= 0  && curr!=end){
                nd.next=curr;
                curr=curr.next;
                nd.next.next=null;
                nd=nd.next;
            }
        }
return list;
    }



    public static void main(String[] args) {
       linkedList list= new linkedList();
       list= insert(list,2);
       list= insert(list,6);
       list= insert(list,1);
       list= insert(list,13);
       list= insert(list,24);
       list= insert(list,15);
       list= insert(list,9);

       printList(list);

        System.out.println();
//        System.out.println("Total Nodes: "+countNodes(list));
//        list= dltDuplicate(list);
//        printList(list);

        //sorting
//        list= sort(list);
//        printList(list);

        dlt_alt(list.head);
        printList(list);

    }
}
