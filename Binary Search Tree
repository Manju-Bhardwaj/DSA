import java.util.ArrayList;

public class bst_build {
    static class Node{
        int data;
        Node left;
        Node right;
        Node(int data){
            this.data=data;
        }
    }
    public static Node insert(Node root,int val){
        if (root == null) {
            root =new Node(val);
            return root;
        }
        if(root.data>val){
            //left subtree
            root.left=insert(root.left,val);
        }
        else{
            root.right= insert(root.right, val);
        }
        return root;
    }

    //to search a key
    public static boolean search(Node root, int key){
        if(root==null){
            return false;
        }
        if(root.data> key){
            return search(root.left, key);
        }
        else if(root.data==key){
            return true;
        }
        else{
            return search(root.right,key);
        }

    }
    //deleting node in bst...
    public static Node delete(Node root, int val){
        //searching the node
        if(root.data>val){
            root.left= delete(root.left, val);
        }
        else if(root.data < val){
            root.right= delete(root.right, val);
        }
        else{
            //root.data== val
            //node found
            //case1: it is leaf node
            if(root.left== null && root.right==null){
                return null;
            }

            //case2: it has one child
            if(root.right==null){
                return root.left;
            }
            else if(root.left==null){
                return root.right;
            }

            //case 3:it has 2 children
            //1.find the inorder successor
            Node IS= inorderSuccessor(root.right);

            //2. replace root with is.data
            root.data= IS.data;

            //3.delete the IS from the right subtree
            root.right= delete(root.right, IS.data);

        }
        return root;
    }
    public static Node inorderSuccessor(Node root){
        while(root.left!=null){
            root=root.left;
        }
        return root;
    }

    //print nodes in range
    public static void printInRange(Node root, int x, int y){
        if(root==null){
            return ;
        }
        if(root.data>=x && root.data<=y){
            printInRange(root.left,x,y);
            System.out.print(root.data +" ");
            printInRange(root.right,x,y);
        }
        else if(root.data>y){
            printInRange(root.left,x,y);
        }
        else {
            printInRange(root.right,x,y);
        }
    }

    //print root to leaf paths

    public static void printRoot2Leaf(Node root, ArrayList<Integer>path){
        if(root==null){
            return;
        }
        path.add(root.data);
        if(root.left==null && root.right==null){
            printPath(path);
        }else{
            printRoot2Leaf(root.left, path);
            printRoot2Leaf(root.right, path);

        }
        path.remove(path.size()-1);
    }
    public static void printPath(ArrayList<Integer>path){
        for (int i = 0; i < path.size(); i++) {
            System.out.print(path.get(i)+"->");
        }
        System.out.println();
    }
    public static int[] inorder(Node root,int[]arr){

        if(root==null){
            return arr;
        }
        inorder(root.left,arr);
        System.out.print(root.data);
        inorder(root.right,arr);
        return arr;
    }

    public static void main(String[] args) {
        int values[]= {5,1,3,4,2,7};
        Node root=null;
        for (int i = 0; i < values.length; i++) {
            root= insert(root,values[i]);
        }
//        inorder(root);
        System.out.println();
//        if(search(root,3)){
//            System.out.println("key found!!");
//        }else{
//            System.out.println("Not found!!");
//        }
//        delete(root,3);
//        inorder(root);
//        System.out.println();

//            printInRange(root,1,6);
            printRoot2Leaf(root, new ArrayList<>());
    }
}
